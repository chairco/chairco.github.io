<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Jason's Blog</title><link href="https://chairco.github.io/" rel="alternate"></link><link href="https://chairco.github.io/feeds/restful.atom.xml" rel="self"></link><id>https://chairco.github.io/</id><updated>2018-01-18T22:17:01+08:00</updated><entry><title>RESTful web services cookbook</title><link href="https://chairco.github.io/posts/2018/01/Restful-web-services-cookbook.html" rel="alternate"></link><published>2018-01-18T22:17:01+08:00</published><author><name>Jason</name></author><id>tag:chairco.github.io,2018-01-18:posts/2018/01/Restful-web-services-cookbook.html</id><summary type="html">&lt;p&gt;這份文件主要是整理過去在開發 RESTful web services 的一些觀念，在 Django 裡有套很棒的第三方套件叫 &lt;a href="http://www.django-rest-framework.org/"&gt;Django &lt;span class="caps"&gt;REST&lt;/span&gt; framework&lt;/a&gt; 可以讓使用者很輕鬆的打造 Web APIs 但我覺得還是有必要確認自己過程中是否真正了解 &lt;span class="caps"&gt;REST&lt;/span&gt; 的觀念以及再使用其他 framework&amp;nbsp;時也能正確的操作，因此有了這份紀錄的產生。&lt;/p&gt;
&lt;p&gt;但首先也是先提一下有人問我 &lt;span class="caps"&gt;REST&lt;/span&gt; 是什麼？我覺得我的回答會是 &lt;span class="caps"&gt;REST&lt;/span&gt; 是一種風格，目的是透過簡潔方法達到類似 &lt;span class="caps"&gt;SOAP&lt;/span&gt;, &lt;span class="caps"&gt;XML&lt;/span&gt;-&lt;span class="caps"&gt;RPC&lt;/span&gt; 等方法。這個風格是基於 &lt;span class="caps"&gt;HTTP&lt;/span&gt;、&lt;span class="caps"&gt;URL&lt;/span&gt;、&lt;span class="caps"&gt;XML&lt;/span&gt;、&lt;span class="caps"&gt;HTML&lt;/span&gt; 這些標準與協定。然後具備 &lt;span class="caps"&gt;REST&lt;/span&gt; 風格的 Web &lt;span class="caps"&gt;API&lt;/span&gt; 被稱為 RESTful &lt;span class="caps"&gt;API&lt;/span&gt;。如果有人覺得可以更詳細的補充請告訴我。&lt;/p&gt;
&lt;p&gt;接著就從動詞，使用情境等紀錄，希望也在做這些開發的朋友如有發現錯誤能給予指教。&lt;/p&gt;
&lt;h2&gt;動詞&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="caps"&gt;GET&lt;/span&gt; - 得到&lt;strong&gt;一個&lt;/strong&gt;資源描述(情境為安全下使用)&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;PUT&lt;/span&gt; - 建立與更新&lt;strong&gt;一個&lt;/strong&gt;資源&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;DELETE&lt;/span&gt; -&amp;nbsp;用於刪除資源&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;POST&lt;/span&gt; - 建立&lt;strong&gt;多個&lt;/strong&gt;新資源，或對多個新資源進行他種變更&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;span class="caps"&gt;GET&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;不要將 &lt;span class="caps"&gt;GET&lt;/span&gt; 用於不安全的操作上，例如購物車上的&lt;code&gt;添加商品&lt;/code&gt;、&lt;code&gt;發送訊息&lt;/code&gt;、&lt;code&gt;刪除訊息&lt;/code&gt;等等操作。但如果一定要使用 &lt;span class="caps"&gt;GET&lt;/span&gt;&amp;nbsp;來做務必確認以下幾點：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;確保這個操作沒有做暫存：&amp;nbsp;Catch-control:no-catch&lt;/li&gt;
&lt;li&gt;確保副作用(side&amp;nbsp;effect)都是良性的，不會影響重要的資料&lt;/li&gt;
&lt;li&gt;在 server&amp;nbsp;上最好是將這些操作做成可以重複執行&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;&lt;span class="caps"&gt;POST&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span class="caps"&gt;POST&lt;/span&gt; 的重點覺得應該是在多個資源的操控，而且他能將很多資料包成一個資料結構傳輸。例如在做查詢時候，要丟很長串資料 &lt;span class="caps"&gt;GET&lt;/span&gt; 可能會受限於 &lt;span class="caps"&gt;URL&lt;/span&gt; 在瀏覽器上的長度。 &lt;span class="caps"&gt;POST&lt;/span&gt;&amp;nbsp;就能解決這類問題。不過還是有些情境如下整理：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;將資源視為一個工廠(factory)&lt;/li&gt;
&lt;li&gt;透過一個控制器來修改一或多個資源&lt;/li&gt;
&lt;li&gt;執行大數據的傳輸查詢&lt;/li&gt;
&lt;li&gt;執行不安全或非冪等(no&amp;nbsp;Idempotent)操作&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;整理了適用的情境：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;對已經存在的資源註解&lt;/li&gt;
&lt;li&gt;對信箱列表、新聞群組或是類似群組發送訊息&lt;/li&gt;
&lt;li&gt;資料模組，例如表單送到資料處理後的結果&lt;/li&gt;
&lt;li&gt;額外操作擴充資料庫&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;也因此暫存不會儲存這些方法造成影響，爬蟲工具不會發出 &lt;span class="caps"&gt;POST&lt;/span&gt; 請求，大部分通用的 &lt;span class="caps"&gt;HTTP&lt;/span&gt; 工具不會重複的傳送 &lt;span class="caps"&gt;POST&lt;/span&gt;&amp;nbsp;請求。&lt;/p&gt;
&lt;p&gt;雖然適合用 &lt;span class="caps"&gt;GET&lt;/span&gt; 但用 &lt;span class="caps"&gt;POST&lt;/span&gt;&amp;nbsp;更為適合情境:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;瀏覽器發出的請求，如果將相關內容用 &lt;span class="caps"&gt;URL&lt;/span&gt; 做傳遞可能會洩漏敏感訊息例如：信用卡資料等等，如果無法使用 &lt;span class="caps"&gt;TLS&lt;/span&gt; 時候就可以考慮用 &lt;span class="caps"&gt;POST&lt;/span&gt;。&lt;/li&gt;
&lt;li&gt;客戶送出的資料有太多的參數時。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;span class="caps"&gt;POST&lt;/span&gt; 創建資源方法是採用 factory&amp;nbsp;模式。&lt;/p&gt;
&lt;h3&gt;&lt;span class="caps"&gt;PUT&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;用來創建與更新單一資源。與 &lt;span class="caps"&gt;POST&lt;/span&gt; 差異在於當用戶端知道創建資源的 &lt;span class="caps"&gt;URL&lt;/span&gt; 時才能使用 &lt;span class="caps"&gt;PUT&lt;/span&gt; 不然就使用 &lt;span class="caps"&gt;POST&lt;/span&gt;，因此在這樣方法下伺服器需要和用戶端解釋 &lt;span class="caps"&gt;URL&lt;/span&gt; 如何組成，什麼樣的 &lt;span class="caps"&gt;URL&lt;/span&gt; 是合法或是非法的。同時還要顧慮到伺服器端是否有設定 &lt;span class="caps"&gt;URL&lt;/span&gt; 的模式或是過濾規則。通常會使用範圍較小的 &lt;span class="caps"&gt;URL&lt;/span&gt;&amp;nbsp;來創建資源。&lt;/p&gt;
&lt;h2&gt;設計&lt;/h2&gt;
&lt;p&gt;RESTful &lt;span class="caps"&gt;API&lt;/span&gt; 透過 &lt;span class="caps"&gt;URL&lt;/span&gt; 來標示&lt;code&gt;資源(resource)&lt;/code&gt;的實體。因此會使用 &lt;span class="caps"&gt;HTTP&lt;/span&gt;&amp;nbsp;描述與格式來包裝這些實體與實際的標頭。接著稍微介紹一下我知道的部分：&lt;/p&gt;
&lt;h3&gt;Header&amp;nbsp;的描述包含以下幾項&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Content-Type: 描述 Header&amp;nbsp;類型與包含的參數&lt;/li&gt;
&lt;li&gt;Content-Length:&amp;nbsp;正文字串長度&lt;/li&gt;
&lt;li&gt;Content-Language:&amp;nbsp;指定得語言&lt;/li&gt;
&lt;li&gt;Content-&lt;span class="caps"&gt;MD5&lt;/span&gt;: 採 &lt;span class="caps"&gt;MD5&lt;/span&gt;&amp;nbsp;驗證的摘要&lt;/li&gt;
&lt;li&gt;Content-Enconding: gzip, compress or deflate&amp;nbsp;編碼時使用&lt;/li&gt;
&lt;li&gt;Last Modified:&amp;nbsp;資源被修改的時間&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# 範例
Content-Type: application/xml;charset=UTF-8 
Content-Language: en-US
Content-MD5: bbdc7bbb8ea5a689666e33ac922c0f83
Last-Modified: Sun, 29 Mar 2009 04:51:38 GMT

&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;user&lt;/span&gt; &lt;span class="na"&gt;xmlns:atom&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.w3.org/2005/Atom&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;user001&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;atom:link&lt;/span&gt; &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;self&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://example.org/user/user001&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;John Doe&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;email&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;john@example.org&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;email&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;user&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Content-Type&lt;/h4&gt;
&lt;p&gt;描述 header 的類型，通常會說 media-type or &lt;span class="caps"&gt;MIME&lt;/span&gt;。例如：text/html、image/png 這些都是一種 header，目的是告訴你要將這種訊息要編譯成哪一種格式的方法。&lt;span class="caps"&gt;XML&lt;/span&gt;、&lt;span class="caps"&gt;JSON&lt;/span&gt;&amp;nbsp;這些都是。所以如果沒有標頭就只能猜測。&lt;/p&gt;
&lt;h4&gt;Content-Length&lt;/h4&gt;
&lt;p&gt;讓接收方來判斷是否接收正確的數據長度。但 &lt;span class="caps"&gt;HTTP&lt;/span&gt; 1.1 有了&lt;code&gt;分塊傳輸編碼 (chuncked transfer encoding)&lt;/code&gt; 讓接收方不需要預先知道數據長度，因為最終會有一個 0 的塊結束。但如果是 &lt;span class="caps"&gt;HTTP&lt;/span&gt; 1.0 並未包含分塊傳輸編碼所以還是需要&amp;nbsp;Content-Length。&lt;/p&gt;
&lt;h4&gt;Content-Language&lt;/h4&gt;
&lt;p&gt;本地化的語言需求。&lt;/p&gt;
&lt;h4&gt;Content-&lt;span class="caps"&gt;MD5&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;用來驗證數據文本的完整性。但不能保證是否數據被竄改。&lt;/p&gt;
&lt;h4&gt;Content-Enconding&lt;/h4&gt;
&lt;p&gt;表示數據壓縮的方式，但是因為沒有方法知道 server&amp;nbsp;使用的壓縮法，所以儘量避免使用除非很清楚知道。&lt;/p&gt;
&lt;h4&gt;Last&amp;nbsp;Modified&lt;/h4&gt;
&lt;p&gt;用來表示資源最後被修改時間。&lt;/p&gt;
&lt;hr /&gt;</summary><category term="Python"></category><category term="RESTful"></category><category term="API"></category></entry></feed>